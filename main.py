import os
import logging
import asyncio
from datetime import datetime, time
from typing import Dict, List, Optional
import pytz

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from dotenv import load_dotenv

from database.database import Database
from ton_integration.ton_wallet import TONWallet
from utils.message_validator import MessageValidator
from games.dice_game import DiceGame
from couchsurfing.couchsurfing_service import CouchsurfingService

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('config.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class GasJKBot:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.db = Database(os.getenv('DATABASE_PATH', './database/gasjk_bot.db'))
        self.ton_wallet = TONWallet(os.getenv('TON_NETWORK', 'mainnet'))
        self.message_validator = MessageValidator()
        self.dice_game = DiceGame(self.db)
        self.couchsurfing = CouchsurfingService(self.db)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.admin_id = int(os.getenv('TELEGRAM_ADMIN_ID', 0))
        self.message_reward = float(os.getenv('MESSAGE_REWARD', 0.1))
        self.min_withdrawal = float(os.getenv('MIN_WITHDRAWAL_AMOUNT', 25000))
        
        # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è FSM
        self.user_states = {}
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db.add_user(
            user.id, 
            user.username, 
            user.first_name, 
            user.last_name
        )
        
        if update.effective_chat.type == 'private':
            # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
            await self.show_main_menu(update, context)
        else:
            # –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è $gasJK —Ç–æ–∫–µ–Ω–∞–º–∏ –∏ –∫–∞—É—á—Å—ë—Ä—Ñ–∏–Ω–≥–∞. "
                f"–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º."
            )
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å $gasJK", callback_data="balance")],
            [InlineKeyboardButton("üé≤ –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏", callback_data="dice_game")],
            [InlineKeyboardButton("üè† –ö–∞—É—á—Å—ë—Ä—Ñ–∏–Ω–≥", callback_data="couchsurfing")],
            [InlineKeyboardButton("üñºÔ∏è –ú–æ–∏ NFT", callback_data="my_nfts")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å $gasJK", callback_data="send_gasjk")],
            [InlineKeyboardButton("üì• –ü–æ–ª—É—á–∏—Ç—å $gasJK", callback_data="receive_gasjk")],
            [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å TON –∫–æ—à–µ–ª–µ–∫", callback_data="connect_wallet")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é GasJK Bot\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é GasJK Bot\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message_text = update.message.text
        chat_type = update.effective_chat.type
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db.add_user(
            user.id, 
            user.username, 
            user.first_name, 
            user.last_name
        )
        
        if chat_type == 'private':
            # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–±—Ä–∞–±–æ—Ç–∫–∞ FSM
            await self.handle_private_message(update, context)
        else:
            # –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç - –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
            await self.handle_group_message(update, context)
    
    async def handle_private_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = self.user_states.get(user_id, {})
        
        if user_state.get('state') == 'waiting_wallet_address':
            await self.connect_wallet_address(update, context, message_text)
        elif user_state.get('state') == 'waiting_send_amount':
            await self.process_send_amount(update, context, message_text)
        elif user_state.get('state') == 'waiting_send_user':
            await self.process_send_user(update, context, message_text)
        elif user_state.get('state') == 'waiting_dice_bet':
            await self.process_dice_bet(update, context, message_text)
        elif user_state.get('state') == 'waiting_dice_opponent':
            await self.process_dice_opponent(update, context, message_text)
        elif user_state.get('state') == 'waiting_ad_country':
            await self.process_ad_country(update, context, message_text)
        elif user_state.get('state') == 'waiting_ad_city':
            await self.process_ad_city(update, context, message_text)
        elif user_state.get('state') == 'waiting_ad_description':
            await self.process_ad_description(update, context, message_text)
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self.show_main_menu(update, context)
    
    async def handle_group_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ"""
        user = update.effective_user
        message_text = update.message.text
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        validation_result = self.message_validator.validate_message(message_text, user.id)
        
        if validation_result['is_valid']:
            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.db.update_user_balance(user.id, self.message_reward)
            self.db.increment_messages(user.id)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            self.db.add_transaction(0, user.id, self.message_reward, 'message_reward')
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ø–∞–º)
            if validation_result['score'] > 0.5:
                await update.message.reply_text(
                    f"‚úÖ +{self.message_reward} $gasJK –∑–∞ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! "
                    f"–ë–∞–ª–∞–Ω—Å: {self.db.get_user(user.id)['gasjk_balance']:.1f} $gasJK"
                )
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é
            logger.info(f"Message from {user.id} didn't pass validation: {validation_result['reason']}")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "balance":
            await self.show_balance(update, context)
        elif data == "dice_game":
            await self.show_dice_menu(update, context)
        elif data == "couchsurfing":
            await self.show_couchsurfing_menu(update, context)
        elif data == "my_nfts":
            await self.show_nfts(update, context)
        elif data == "stats":
            await self.show_stats(update, context)
        elif data == "send_gasjk":
            await self.start_send_gasjk(update, context)
        elif data == "receive_gasjk":
            await self.show_receive_gasjk(update, context)
        elif data == "connect_wallet":
            await self.start_connect_wallet(update, context)
        elif data == "back_to_main":
            await self.show_main_menu(update, context)
        elif data.startswith("dice_"):
            await self.handle_dice_callback(update, context, data)
        elif data.startswith("cs_"):
            await self.handle_couchsurfing_callback(update, context, data)
    
    async def show_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.callback_query.from_user.id
        user = self.db.get_user(user_id)
        
        if user:
            balance = user['gasjk_balance']
            messages_count = user['messages_count']
            nft_count = user['nft_count']
            
            text = f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.1f} $gasJK\n\n"
            text += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            text += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
            text += f"‚Ä¢ NFT: {nft_count}\n"
            
            if balance >= self.min_withdrawal:
                text += f"\n‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω –≤—ã–≤–æ–¥ –≤ TON –∫–æ—à–µ–ª–µ–∫!"
            else:
                text += f"\n‚è≥ –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–∫–æ–ø–∏—Ç—å {self.min_withdrawal} $gasJK"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_dice_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏"""
        keyboard = [
            [InlineKeyboardButton("üé≤ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", callback_data="dice_create")],
            [InlineKeyboardButton("üìä –ú–æ–∏ –∏–≥—Ä—ã", callback_data="dice_my_games")],
            [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="dice_leaderboard")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "üé≤ –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏\n\n–°—Ç–∞–≤—å—Ç–µ $gasJK –∏ —Å–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏!",
            reply_markup=reply_markup
        )
    
    async def show_couchsurfing_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞—É—á—Å—ë—Ä—Ñ–∏–Ω–≥–∞"""
        keyboard = [
            [InlineKeyboardButton("üè† –ü—Ä–∏–Ω–∏–º–∞—é –≥–æ—Å—Ç–µ–π", callback_data="cs_host")],
            [InlineKeyboardButton("üèÉ –ü—Ä–∏–µ–¥—É –≤ –≥–æ—Å—Ç–∏", callback_data="cs_guest")],
            [InlineKeyboardButton("üìã –î–æ—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π", callback_data="cs_board")],
            [InlineKeyboardButton("üìä –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="cs_bookings")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "üè† –ö–∞—É—á—Å—ë—Ä—Ñ–∏–Ω–≥\n\n–ù–∞–π–¥–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ—á–ª–µ–≥–∞ –∏–ª–∏ –ø—Ä–∏–º–∏—Ç–µ –≥–æ—Å—Ç–µ–π!",
            reply_markup=reply_markup
        )
    
    async def show_nfts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.callback_query.from_user.id
        nfts = self.db.get_user_nfts(user_id)
        
        if nfts:
            text = "üñºÔ∏è –í–∞—à–∏ NFT:\n\n"
            for nft in nfts:
                text += f"‚Ä¢ {nft['collection_name']} #{nft['token_id']}\n"
        else:
            text = "üñºÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç NFT"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        user_id = update.callback_query.from_user.id
        user = self.db.get_user(user_id)
        transactions = self.db.get_user_transactions(user_id, 5)
        
        text = "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['gasjk_balance']:.1f} $gasJK\n"
        text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {user['messages_count']}\n"
        text += f"üñºÔ∏è NFT: {user['nft_count']}\n"
        text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['registration_date']}\n\n"
        
        if transactions:
            text += "üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n"
            for tx in transactions[:3]:
                amount = tx['amount']
                if tx['from_user_id'] == user_id:
                    text += f"‚ûñ {amount:.1f} $gasJK\n"
                else:
                    text += f"‚ûï {amount:.1f} $gasJK\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def start_send_gasjk(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ $gasJK"""
        user_id = update.callback_query.from_user.id
        user = self.db.get_user(user_id)
        
        if user['gasjk_balance'] <= 0:
            await update.callback_query.edit_message_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ $gasJK –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            return
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã
        self.user_states[user_id] = {
            'state': 'waiting_send_amount',
            'data': {}
        }
        
        await update.callback_query.edit_message_text(
            f"üí∏ –û—Ç–ø—Ä–∞–≤–∫–∞ $gasJK\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user['gasjk_balance']:.1f} $gasJK\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]])
        )
    
    async def process_send_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        user_id = update.effective_user.id
        try:
            amount = float(update.message.text)
            user = self.db.get_user(user_id)
            
            if amount <= 0:
                await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
            
            if amount > user['gasjk_balance']:
                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                return
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É–º–º—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            self.user_states[user_id] = {
                'state': 'waiting_send_user',
                'data': {'amount': amount}
            }
            
            await update.message.reply_text(
                f"üí∏ –û—Ç–ø—Ä–∞–≤–∫–∞ {amount:.1f} $gasJK\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–±–µ–∑ @):"
            )
            
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
    
    async def process_send_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        recipient_username = update.message.text.strip()
        
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –ø–æ username –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        recipient_id = None  # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞
        
        if not recipient_id:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        state_data = self.user_states[user_id]['data']
        amount = state_data['amount']
        
        # –°–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        self.db.update_user_balance(user_id, -amount)
        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        self.db.update_user_balance(recipient_id, amount)
        # –ó–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        self.db.add_transaction(user_id, recipient_id, amount, 'transfer')
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        del self.user_states[user_id]
        
        await update.message.reply_text(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {amount:.1f} $gasJK –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{recipient_username}"
        )
        await self.show_main_menu(update, context)
    
    async def show_receive_gasjk(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ $gasJK"""
        user_id = update.callback_query.from_user.id
        user = self.db.get_user(user_id)
        
        text = "üì• –ü–æ–ª—É—á–µ–Ω–∏–µ $gasJK\n\n"
        text += f"–í–∞—à username: @{user.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        text += "–î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º $gasJK, –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à username.\n\n"
        text += f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['gasjk_balance']:.1f} $gasJK"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def start_connect_wallet(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è TON –∫–æ—à–µ–ª—å–∫–∞"""
        user_id = update.callback_query.from_user.id
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        self.user_states[user_id] = {
            'state': 'waiting_wallet_address',
            'data': {}
        }
        
        text = "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ TON –∫–æ—à–µ–ª—å–∫–∞\n\n"
        text += "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ TON –∫–æ—à–µ–ª—å–∫–∞:\n\n"
        text += "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ Telegram Wallet –∏–ª–∏ Tonkeeper\n"
        text += "2Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫\n"
        text += "3Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞\n"
        text += "4Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ\n\n"
        text += "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ TON –∫–æ—à–µ–ª—å–∫–∞:"
        
        keyboard = [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def connect_wallet_address(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
        user_id = update.effective_user.id
        wallet_address = update.message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
        if not self.ton_wallet.validate_wallet_address(wallet_address):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ TON –∫–æ—à–µ–ª—å–∫–∞")
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        # self.db.update_user_wallet(user_id, wallet_address)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        del self.user_states[user_id]
        
        await update.message.reply_text(
            f"‚úÖ TON –∫–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
            f"–ê–¥—Ä–µ—Å: {wallet_address}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–æ–¥–∏—Ç—å $gasJK –≤ TON –∫–æ—à–µ–ª–µ–∫ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ {self.min_withdrawal} —Ç–æ–∫–µ–Ω–æ–≤."
        )
        await self.show_main_menu(update, context)
    
    async def handle_dice_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫ –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏"""
        if data == "dice_create":
            await self.start_dice_game(update, context)
        elif data == "dice_my_games":
            await self.show_my_dice_games(update, context)
        elif data == "dice_leaderboard":
            await self.show_dice_leaderboard(update, context)
    
    async def start_dice_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏"""
        user_id = update.callback_query.from_user.id
        user = self.db.get_user(user_id)
        
        if user['gasjk_balance'] < self.dice_game.min_bet:
            await update.callback_query.edit_message_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ $gasJK –¥–ª—è –∏–≥—Ä—ã. –ú–∏–Ω–∏–º—É–º: {self.dice_game.min_bet} $gasJK",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dice_game")]])
            )
            return
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞–≤–∫–∏
        self.user_states[user_id] = {
            'state': 'waiting_dice_bet',
            'data': {}
        }
        
        await update.callback_query.edit_message_text(
            f"üé≤ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏\n\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user['gasjk_balance']:.1f} $gasJK\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {self.dice_game.min_bet} $gasJK\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {self.dice_game.max_bet} $gasJK\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="dice_game")]])
        )
    
    async def process_dice_bet(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        try:
            bet_amount = float(update.message.text)
            user = self.db.get_user(user_id)
            
            if not self.dice_game.min_bet <= bet_amount <= self.dice_game.max_bet:
                await update.message.reply_text(
                    f"‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {self.dice_game.min_bet} –¥–æ {self.dice_game.max_bet} $gasJK"
                )
                return
            
            if bet_amount > user['gasjk_balance']:
                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                return
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            self.user_states[user_id] = {
                'state': 'waiting_dice_opponent',
                'data': {'bet_amount': bet_amount}
            }
            
            await update.message.reply_text(
                f"üé≤ –°—Ç–∞–≤–∫–∞: {bet_amount:.1f} $gasJK\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ username –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–±–µ–∑ @):"
            )
            
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
    
    async def process_dice_opponent(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –¥–ª—è –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        opponent_username = update.message.text.strip()
        
        # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø–æ username
        opponent_id = None  # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞
        
        if not opponent_id:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if opponent_id == user_id:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
        state_data = self.user_states[user_id]['data']
        bet_amount = state_data['bet_amount']
        
        game_id = self.dice_game.create_game(user_id, opponent_id, bet_amount)
        
        if game_id:
            # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            del self.user_states[user_id]
            
            await update.message.reply_text(
                f"üé≤ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"ID –∏–≥—Ä—ã: {game_id}\n"
                f"–°—Ç–∞–≤–∫–∞: {bet_amount:.1f} $gasJK\n"
                f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: @{opponent_username}\n\n"
                f"–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–∏–º–µ—Ç –∏–≥—Ä—É –∏ –±—Ä–æ—Å–∏—Ç –∫–æ—Å—Ç–∏."
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã")
        
        await self.show_main_menu(update, context)
    
    async def show_my_dice_games(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ—Å—Ç–∏"""
        user_id = update.callback_query.from_user.id
        games = self.dice_game.get_player_games(user_id, 5)
        
        if games:
            text = "üé≤ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã:\n\n"
            for game in games:
                status = "üîÑ –ê–∫—Ç–∏–≤–Ω–∞" if game['status'] == 'active' else "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞"
                text += f"‚Ä¢ –ò–≥—Ä–∞ #{game['id']} - {status}\n"
                text += f"  –°—Ç–∞–≤–∫–∞: {game['bet_amount']:.1f} $gasJK\n\n"
        else:
            text = "üé≤ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dice_game")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_dice_leaderboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏"""
        leaderboard = self.dice_game.get_leaderboard(10)
        
        if leaderboard:
            text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (–∏–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏):\n\n"
            for i, player in enumerate(leaderboard, 1):
                name = player.get('first_name', '') + ' ' + player.get('last_name', '')
                wins = player.get('wins', 0)
                total_winnings = player.get('total_winnings', 0)
                text += f"{i}. {name}\n"
                text += f"   –ü–æ–±–µ–¥—ã: {wins}, –í—ã–∏–≥—Ä—ã—à: {total_winnings:.1f} $gasJK\n\n"
        else:
            text = "üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dice_game")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def handle_couchsurfing_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫ –∫–∞—É—á—Å—ë—Ä—Ñ–∏–Ω–≥–∞"""
        if data == "cs_host":
            await self.start_create_ad(update, context)
        elif data == "cs_guest":
            await self.show_available_ads(update, context)
        elif data == "cs_board":
            await self.show_ads_board(update, context)
        elif data == "cs_bookings":
            await self.show_my_bookings(update, context)
    
    async def start_create_ad(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–∏–µ–º–µ –≥–æ—Å—Ç–µ–π"""
        user_id = update.callback_query.from_user.id
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
        self.user_states[user_id] = {
            'state': 'waiting_ad_country',
            'data': {}
        }
        
        await update.callback_query.edit_message_text(
            "üè† –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="couchsurfing")]])
        )
    
    async def process_ad_country(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã"""
        user_id = update.effective_user.id
        country = update.message.text.strip()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≥–æ—Ä–æ–¥—É
        self.user_states[user_id] = {
            'state': 'waiting_ad_city',
            'data': {'country': country}
        }
        
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    
    async def process_ad_city(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
        user_id = update.effective_user.id
        city = update.message.text.strip()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é
        state_data = self.user_states[user_id]['data']
        state_data['city'] = city
        
        self.user_states[user_id] = {
            'state': 'waiting_ad_description',
            'data': state_data
        }
        
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—É—Å–ª–æ–≤–∏—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è, —á—Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ):"
        )
    
    async def process_ad_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        description = update.message.text.strip()
        
        state_data = self.user_states[user_id]['data']
        country = state_data['country']
        city = state_data['city']
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –¥–∞—Ç)
        ad_id = self.couchsurfing.create_ad(
            user_id, country, city, "", "2024-01-01", "2024-12-31", description
        )
        
        if ad_id > 0:
            # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            del self.user_states[user_id]
            
            await update.message.reply_text(
                f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
                f"–°—Ç—Ä–∞–Ω–∞: {country}\n"
                f"–ì–æ—Ä–æ–¥: {city}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
                f"ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ad_id}"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
        
        await self.show_main_menu(update, context)
    
    async def show_available_ads(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        ads = self.couchsurfing.get_ads()
        
        if ads:
            text = "üè† –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
            for ad in ads[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                text += f"üìç {ad['country']}, {ad['city']}\n"
                text += f"üë§ {ad.get('host_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {ad.get('rating', 0):.1f}\n"
                text += f"üìù {ad['description'][:100]}...\n\n"
        else:
            text = "üè† –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="couchsurfing")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_ads_board(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        ads = self.couchsurfing.get_ads()
        
        if ads:
            text = "üìã –î–æ—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:\n\n"
            for ad in ads[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                text += f"üè† {ad['country']}, {ad['city']}\n"
                text += f"üë§ @{ad.get('host_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                text += f"‚≠ê {ad.get('rating', 0):.1f}/5.0\n"
                text += f"üìÖ {ad['start_date']} - {ad['end_date']}\n\n"
        else:
            text = "üìã –ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="couchsurfing")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_my_bookings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.callback_query.from_user.id
        bookings_as_guest = self.couchsurfing.get_user_bookings(user_id, as_guest=True)
        bookings_as_host = self.couchsurfing.get_user_bookings(user_id, as_guest=False)
        
        text = "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        
        if bookings_as_guest:
            text += "üèÉ –ö–∞–∫ –≥–æ—Å—Ç—å:\n"
            for booking in bookings_as_guest[:3]:
                text += f"‚Ä¢ {booking['country']}, {booking['city']} - {booking['status']}\n"
            text += "\n"
        
        if bookings_as_host:
            text += "üè† –ö–∞–∫ —Ö–æ—Å—Ç:\n"
            for booking in bookings_as_host[:3]:
                text += f"‚Ä¢ {booking['country']}, {booking['city']} - {booking['status']}\n"
        
        if not bookings_as_guest and not bookings_as_host:
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="couchsurfing")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def send_daily_report(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        if not self.admin_id:
            return
        
        stats = self.db.get_daily_stats()
        
        text = "üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç\n\n"
        text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        text += f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {stats['total_balance']:.1f} $gasJK\n"
        text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
        text += f"üñºÔ∏è NFT: {stats['total_nfts']}\n\n"
        text += f"üìÖ {datetime.now(self.moscow_tz).strftime('%d.%m.%Y')}"
        
        await context.bot.send_message(chat_id=self.admin_id, text=text)
    
    async def send_course_update(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞"""
        if not self.admin_id:
            return
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
        text = "üí± –ö—É—Ä—Å $gasJK\n\n"
        text += f"üíµ $gasJK/USD: 0.001\n"
        text += f"‚ÇΩ $gasJK/RUB: 0.08\n"
        text += f"‚ö° $gasJK/TON: 0.0005\n\n"
        text += f"üìÖ {datetime.now(self.moscow_tz).strftime('%d.%m.%Y %H:%M')}"
        
        await context.bot.send_message(chat_id=self.admin_id, text=text)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.bot_token:
            logger.error("Bot token not found!")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(self.bot_token).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
        job_queue = application.job_queue
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 22:00 –ø–æ –ú–°–ö
        report_time = time(22, 0, tzinfo=self.moscow_tz)
        job_queue.run_daily(self.send_daily_report, report_time)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤ 8:00 –ø–æ –ú–°–ö
        course_time = time(8, 0, tzinfo=self.moscow_tz)
        job_queue.run_daily(self.send_course_update, course_time)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("Starting GasJK Bot...")
        application.run_polling()

if __name__ == "__main__":
    bot = GasJKBot()
    bot.run() 