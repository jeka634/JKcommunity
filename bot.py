import logging
import random
import re
import datetime
import pytz
import time
import sqlite3
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes, JobQueue
)
from database import Database
from config import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å
daily_achievements = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª –ª–∏ –ø–æ—Ä–æ–≥ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç —Å–µ–≥–æ–¥–Ω—è (—Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å –Ω–∞ –≤–µ—Å—å —á–∞—Ç)
daily_threshold_achieved = {}  # {threshold: True}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±—É—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id: timestamp_end}
user_boosts = {}  # {user_id: timestamp_end}

class ChatBot:
    def __init__(self, application):
        self.db = Database()
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        self.application = application
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞. –Ø –Ω–∞—á–∏—Å–ª—è—é –æ—á–∫–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≤–µ–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/stats - —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/week - —Ç–æ–ø-10 –∑–∞ –Ω–µ–¥–µ–ª—é\n"
            "/month - —Ç–æ–ø-10 –∑–∞ –º–µ—Å—è—Ü\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
            "/JK - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ JK Community"
        )
    
    async def jk_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /JK"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π)
        user_language = 'ru'
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫
        if context.args:
            lang_arg = context.args[0].lower()
            if lang_arg in ['en', 'english']:
                user_language = 'en'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —è–∑—ã–∫–µ
        welcome_message = JK_WELCOME_MESSAGE.get(user_language, JK_WELCOME_MESSAGE['ru'])
        await update.message.reply_text(welcome_message, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = f"""
ü§ñ *–ë–æ—Ç-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞*

*–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –æ—á–∫–∏:*
‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–∏–Ω–∏–º—É–º {MIN_WORDS_FOR_POINTS} —Å–ª–æ–≤) –µ—Å—Ç—å —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å +{POINTS_PER_MESSAGE} –æ—á–∫–æ–≤
‚Ä¢ –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {BASE_PROBABILITY*100:.0f}%
‚Ä¢ –° {BOOST_START_HOUR}:00 –¥–æ {BOOST_END_HOUR}:00 –ø–æ –ú–°–ö: {BOOST_PROBABILITY*100:.0f}% (–±—É—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!)

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/stats - —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/week - —Ç–æ–ø-{TOP_USERS_LIMIT} –∑–∞ –Ω–µ–¥–µ–ª—é  
/month - —Ç–æ–ø-{TOP_USERS_LIMIT} –∑–∞ –º–µ—Å—è—Ü
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/JK - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ JK Community

*–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {DAILY_REPORT_HOUR}:{DAILY_REPORT_MINUTE:02d} –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ {', '.join(map(str, POINTS_THRESHOLDS))} –æ—á–∫–æ–≤ –∑–∞ –¥–µ–Ω—å - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π —Ç–æ–ø —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π

*–û–±—â–∞–π—Å—è –∞–∫—Ç–∏–≤–Ω–æ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ—á–∫–∏!* üéØ
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        user_id = update.effective_user.id
        stats = self.db.get_user_stats(user_id)
        
        if not stats:
            await update.message.reply_text("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª –æ—á–∫–æ–≤. –ù–∞—á–Ω–∏ –æ–±—â–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ!")
            return
        
        stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{stats['username']}*

üèÜ *–û–±—â–∏–µ –æ—á–∫–∏:* {stats['total_points']}
üìÖ *–ó–∞ —Å–µ–≥–æ–¥–Ω—è:* {stats['today_points']}
üìà *–ó–∞ –Ω–µ–¥–µ–ª—é:* {stats['week_points']}
üìä *–ó–∞ –º–µ—Å—è—Ü:* {stats['month_points']}

üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {stats['created_at'][:10]}
        """
        await update.message.reply_text(stats_text, parse_mode='Markdown')
    
    def escape_markdown(self, text: str) -> str:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
        for ch in ('_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'):
            text = text.replace(ch, f'\\{ch}')
        return text
    
    async def week_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            top_users = self.db.get_weekly_top(TOP_USERS_LIMIT)
            if not top_users:
                await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!")
                return
            text = f"üèÜ –¢–æ–ø-{TOP_USERS_LIMIT} –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
            for i, (username, points) in enumerate(top_users, 1):
                emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üèÖ"
                safe_username = self.escape_markdown(username or f'user_{i}')
                text += f"{emoji} {i}. @{safe_username} - {points} –æ—á–∫–æ–≤\n"
            await update.message.reply_text(text)  # –ë–µ–∑ parse_mode
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ week_command: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–ø–∞ –Ω–µ–¥–µ–ª–∏.")
    
    async def month_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            top_users = self.db.get_monthly_top(TOP_USERS_LIMIT)
            if not top_users:
                await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!")
                return
            text = f"üèÜ –¢–æ–ø-{TOP_USERS_LIMIT} –∑–∞ –º–µ—Å—è—Ü:\n\n"
            for i, (username, points) in enumerate(top_users, 1):
                emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üèÖ"
                safe_username = self.escape_markdown(username or f'user_{i}')
                text += f"{emoji} {i}. @{safe_username} - {points} –æ—á–∫–æ–≤\n"
            monthly_winners = self.db.get_monthly_winners()
            if monthly_winners:
                text += "\nüìú –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –º–µ—Å—è—Ü–µ–≤:\n"
                for username, points, month_start in monthly_winners[:MONTHLY_WINNERS_HISTORY_LIMIT]:
                    month_name = datetime.datetime.strptime(month_start, '%Y-%m-%d').strftime('%B %Y')
                    safe_username = self.escape_markdown(username or 'user')
                    text += f"üëë {month_name}: @{safe_username} ({points} –æ—á–∫–æ–≤)\n"
            await update.message.reply_text(text)  # –ë–µ–∑ parse_mode
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ month_command: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–ø–∞ –º–µ—Å—è—Ü–∞.")
    
    def is_meaningful_message(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)"""
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        clean_text = re.sub(r'[^\w\s]', '', text.lower())
        words = clean_text.split()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        if len(words) < MIN_WORDS_FOR_POINTS:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã (—Å–ø–∞–º —Ç–∏–ø–∞ "–∞–∞–∞–∞", "–≤–≤–≤–≤–≤")
        for word in words:
            if len(word) > 2 and len(set(word)) <= 2:  # –°–ª–æ–≤–∞ —Ç–∏–ø–∞ "–∞–∞–∞", "–≤–≤–≤–≤"
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ü–∏—Ñ—Ä—ã (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä)
        if re.match(r'^[\d\s]+$', text):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ (—Ñ–ª—É–¥)
        word_count = {}
        for word in words:
            if len(word) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                word_count[word] = word_count.get(word, 0) + 1
                if word_count[word] > 3:  # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –±–æ–ª—å—à–µ 3 —Ä–∞–∑
                    return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ (—Å–ø–∞–º)
        short_words = sum(1 for word in words if len(word) <= 2)
        if short_words > len(words) * 0.7:  # –ï—Å–ª–∏ 70% —Å–ª–æ–≤ –∫–æ—Ä–æ—Ç–∫–∏–µ
            return False
        
        return True
    
    def get_current_probability(self, user_id=None) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤"""
        moscow_time = datetime.datetime.now(self.moscow_tz)
        current_hour = moscow_time.hour
        base = BASE_PROBABILITY
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        now_ts = time.time()
        if user_id and user_id in user_boosts and user_boosts[user_id] > now_ts:
            base += 0.03
        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±—É—Å—Ç ‚Äî –æ–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π
        if BOOST_START_HOUR <= current_hour < BOOST_END_HOUR:
            return BOOST_PROBABILITY
        return base
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.message or not update.message.text:
            return
        
        user = update.effective_user
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ mute
        mute_left = self.db.is_muted(user.id)
        if mute_left > 0:
            mins = mute_left // 60
            secs = mute_left % 60
            await update.message.reply_text(f"–í—ã –≤ –º—É—Ç–µ –µ—â—ë {mins} –º–∏–Ω {secs} —Å–µ–∫.")
            return
        
        message_text = update.message.text
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db.add_user(
            user_id=user.id,
            username=user.username or f"user_{user.id}",
            first_name=user.first_name or "",
            last_name=user.last_name or ""
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º
        if not self.is_meaningful_message(message_text):
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤
        probability = self.get_current_probability(user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏—Å–ª—è—Ç—å –ª–∏ –æ—á–∫–∏
        if random.random() < probability:
            self.db.add_points(user.id, POINTS_PER_MESSAGE)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –¥–µ–Ω—å
            stats = self.db.get_user_stats(user.id)
            if stats:
                current_daily_points = stats['today_points']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                for threshold in POINTS_THRESHOLDS + [10000]:
                    if current_daily_points >= threshold:
                        achievement_key = f"{user.id}_{threshold}"
                        if achievement_key not in daily_achievements:
                            daily_achievements[achievement_key] = True
                            # –ï—Å–ª–∏ –ø–æ—Ä–æ–≥ –µ—â—ë –Ω–µ –±—ã–ª –¥–æ—Å—Ç–∏–≥–Ω—É—Ç —Å–µ–≥–æ–¥–Ω—è –Ω–∏–∫–µ–º ‚Äî –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∏ –±—É—Å—Ç
                            if not daily_threshold_achieved.get(threshold):
                                daily_threshold_achieved[threshold] = True
                                # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ —á–∞—Ç
                                messages = MOTIVATION_MESSAGES.get(threshold, [
                                    f"üéâ @{user.username or user.first_name} –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç–∏–≥ {threshold} –æ—á–∫–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
                                ])
                                message = random.choice(messages).format(username=user.username or user.first_name)
                                await context.bot.send_message(chat_id=CHAT_ID, text=message)
                                # –í—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Å—Ç –Ω–∞ 30 –º–∏–Ω—É—Ç
                                user_boosts[user.id] = time.time() + 30*60
                            break
    
    async def daily_report(self, context: ContextTypes.DEFAULT_TYPE):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 22:00"""
        try:
            top_users = self.db.get_daily_top(TOP_USERS_LIMIT)
            
            if not top_users:
                report_text = f"üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n–°–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!"
            else:
                report_text = f"üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*\n\nüèÜ *–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
                
                for i, (username, points) in enumerate(top_users, 1):
                    emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üèÖ"
                    report_text += f"{emoji} {i}. @{username} - {points} –æ—á–∫–æ–≤\n"
                
                report_text += "\nüéØ *–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—á–∫–∏!*"
            
            await context.bot.send_message(chat_id=CHAT_ID, text=report_text, parse_mode='Markdown')
            logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def boost_announcement(self, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –±—É—Å—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ 20:00"""
        try:
            boost_text = f"""
üöÄ *–ë–£–°–¢ –ê–ö–¢–ò–í–ù–û–°–¢–ò!*

–° {BOOST_START_HOUR}:00 –¥–æ {BOOST_END_HOUR}:00 –ø–æ –ú–°–ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–∫–æ–≤ –ø–æ–≤—ã—à–µ–Ω–∞ —Å {BASE_PROBABILITY*100:.0f}% –¥–æ {BOOST_PROBABILITY*100:.0f}%!

üí¨ –û–±—â–∞–π—Å—è –∞–∫—Ç–∏–≤–Ω–æ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–æ–ª—å—à–µ –æ—á–∫–æ–≤!
‚è∞ –ë—É—Å—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç {BOOST_END_HOUR - BOOST_START_HOUR} —á–∞—Å–∞
            """
            await context.bot.send_message(chat_id=CHAT_ID, text=boost_text, parse_mode='Markdown')
            logger.info("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –±—É—Å—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –±—É—Å—Ç–µ: {e}")
    
    async def reset_daily_achievements(self, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–æ—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å"""
        global daily_achievements, daily_threshold_achieved, user_boosts
        daily_achievements.clear()
        daily_threshold_achieved.clear()
        user_boosts.clear()
        logger.info("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –ø–æ—Ä–æ–≥–∏ –∏ –±—É—Å—Ç—ã –∑–∞ –¥–µ–Ω—å —Å–±—Ä–æ—à–µ–Ω—ã")
    
    async def check_monthly_winner(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –º–µ—Å—è—Ü–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            winner = self.db.get_previous_month_winner()
            if winner:
                user_id, username, points = winner
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
                previous_month = datetime.datetime.now() - datetime.timedelta(days=30)
                month_start = previous_month.replace(day=1).isoformat()[:10]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                self.db.save_monthly_winner(user_id, username, points, month_start)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –º–µ—Å—è—Ü–∞
                winner_text = f"""
üëë *–ü–û–ë–ï–î–ò–¢–ï–õ–¨ –ú–ï–°–Ø–¶–ê!*

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º @{username} —Å –ø–æ–±–µ–¥–æ–π –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ!
üèÜ –ù–∞–±—Ä–∞–Ω–æ –æ—á–∫–æ–≤: {points}

–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üéâ
                """
                await context.bot.send_message(chat_id=CHAT_ID, text=winner_text, parse_mode='Markdown')
                
                logger.info(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –º–µ—Å—è—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {username} —Å {points} –æ—á–∫–∞–º–∏")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –º–µ—Å—è—Ü–∞: {e}")

    async def send_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if len(context.args) != 2:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                return
            to_username = context.args[0].lstrip('@')
            amount = int(context.args[1])
            if amount <= 0:
                await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
                return
            from_user = update.effective_user
            from_stats = self.db.get_user_stats(from_user.id)
            if not from_stats or from_stats['total_points'] < amount:
                await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!")
                return
            # –ù–∞–π—Ç–∏ user_id –ø–æ username
            to_user_id = None
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT user_id FROM users WHERE username = ?", (to_username,))
                row = cursor.fetchone()
                if row:
                    to_user_id = row[0]
            if not to_user_id:
                await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            # –°–ø–∏—Å–∞—Ç—å —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –Ω–∞—á–∏—Å–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            self.db.add_points(from_user.id, -amount)
            self.db.add_points(to_user_id, amount)
            await context.bot.send_message(
                chat_id=CHAT_ID,
                text=f"@{from_user.username or from_user.first_name} –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) {amount} –æ—á–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ @{to_username}!"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ send_command: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –æ—á–∫–æ–≤.")

    async def mute_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if len(context.args) != 2:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mute username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—á–∫–æ–≤ (–∫—Ä–∞—Ç–Ω–æ 100)")
                return
            to_username = context.args[0].lstrip('@')
            amount = int(context.args[1])
            if amount < 100 or amount % 100 != 0:
                await update.message.reply_text("–ú–∏–Ω–∏–º—É–º 100 –æ—á–∫–æ–≤ –∏ —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–Ω–æ 100!")
                return
            from_user = update.effective_user
            from_stats = self.db.get_user_stats(from_user.id)
            if not from_stats or from_stats['total_points'] < amount:
                await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –º—É—Ç–∞!")
                return
            # –ù–∞–π—Ç–∏ user_id –ø–æ username
            to_user_id = None
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT user_id FROM users WHERE username = ?", (to_username,))
                row = cursor.fetchone()
                if row:
                    to_user_id = row[0]
            if not to_user_id:
                await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            # –°–ø–∏—Å–∞—Ç—å –æ—á–∫–∏ —É –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
            self.db.add_points(from_user.id, -amount)
            # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è –º—É—Ç–∞
            mute_minutes = (amount // 100) * 30
            mute_seconds = mute_minutes * 60
            until_ts = int(time.time()) + mute_seconds
            self.db.set_mute(to_user_id, until_ts)
            await context.bot.send_message(
                chat_id=CHAT_ID,
                text=f"@{from_user.username or from_user.first_name} –∑–∞–º—É—Ç–∏–ª(–∞) @{to_username} –Ω–∞ {mute_minutes} –º–∏–Ω—É—Ç! (-{amount} –æ—á–∫–æ–≤)"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ mute_command: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –º—É—Ç–∞.")

    async def dice_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if len(context.args) != 1:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /dice –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—á–∫–æ–≤")
                return
            amount = int(context.args[0])
            user = update.effective_user
            stats = self.db.get_user_stats(user.id)
            if not stats or stats['total_points'] < amount or amount <= 0:
                await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã!")
                return
            # –°–ª—É—á–∞–π–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–∞ 10-20%
            win_chance = random.uniform(0.10, 0.20)
            win = random.random() < win_chance
            if win:
                self.db.add_points(user.id, amount)  # —É–¥–≤–æ–µ–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=CHAT_ID,
                    text=f"@{user.username or user.first_name} –±—Ä–æ—Å–∏–ª(–∞) –∫–æ—Å—Ç–∏ –∏ –≤—ã–∏–≥—Ä–∞–ª(–∞) {amount} –æ—á–∫–æ–≤! üé≤"
                )
            else:
                self.db.add_points(user.id, -amount)
                await context.bot.send_message(
                    chat_id=CHAT_ID,
                    text=f"@{user.username or user.first_name} –±—Ä–æ—Å–∏–ª(–∞) –∫–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª(–∞) {amount} –æ—á–∫–æ–≤! üé≤"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ dice_command: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ –≤ –∫–æ—Å—Ç–∏.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = ChatBot(application)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("stats", bot.stats_command))
    application.add_handler(CommandHandler("week", bot.week_command))
    application.add_handler(CommandHandler("month", bot.month_command))
    application.add_handler(CommandHandler("JK", bot.jk_command))
    application.add_handler(CommandHandler("send", bot.send_command))
    application.add_handler(CommandHandler("mute", bot.mute_command))
    application.add_handler(CommandHandler("dice", bot.dice_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —á–µ—Ä–µ–∑ JobQueue
    job_queue = application.job_queue
    moscow_tz = pytz.timezone('Europe/Moscow')
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
    job_queue.run_daily(
        bot.daily_report, 
        time=datetime.time(hour=DAILY_REPORT_HOUR, minute=DAILY_REPORT_MINUTE, tzinfo=moscow_tz)
    )
    
    # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –±—É—Å—Ç–µ
    job_queue.run_daily(
        bot.boost_announcement, 
        time=datetime.time(hour=BOOST_START_HOUR, minute=0, tzinfo=moscow_tz)
    )
    
    # –°–±—Ä–æ—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    job_queue.run_daily(
        bot.reset_daily_achievements, 
        time=datetime.time(hour=RESET_ACHIEVEMENTS_HOUR, minute=RESET_ACHIEVEMENTS_MINUTE, tzinfo=moscow_tz)
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –º–µ—Å—è—Ü–∞
    job_queue.run_daily(
        bot.check_monthly_winner, 
        time=datetime.time(hour=MONTHLY_WINNER_CHECK_HOUR, minute=MONTHLY_WINNER_CHECK_MINUTE, tzinfo=moscow_tz), 
        days=(1,)
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 