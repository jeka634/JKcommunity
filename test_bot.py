#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞ –¥–ª—è —á–∞—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
"""

import sys
import os
import sqlite3
import datetime
import pytz

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π...")
    
    try:
        import config
        print("‚úÖ config.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ config.py: {e}")
        return False
    
    try:
        import database
        print("‚úÖ database.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ database.py: {e}")
        return False
    
    try:
        from telegram import Update
        from telegram.ext import Application, CommandHandler, MessageHandler, filters
        print("‚úÖ python-telegram-bot –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ python-telegram-bot: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot==20.7")
        return False
    
    try:
        import pytz
        print("‚úÖ pytz –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ pytz: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pytz")
        return False
    
    return True

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        import config
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        assert hasattr(config, 'BOT_TOKEN'), "BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config"
        assert hasattr(config, 'CHAT_ID'), "CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config"
        assert hasattr(config, 'BASE_PROBABILITY'), "BASE_PROBABILITY –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(config, 'BOOST_PROBABILITY'), "BOOST_PROBABILITY –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(config, 'POINTS_PER_MESSAGE'), "POINTS_PER_MESSAGE –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(config, 'MIN_WORDS_FOR_POINTS'), "MIN_WORDS_FOR_POINTS –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(config, 'POINTS_THRESHOLDS'), "POINTS_THRESHOLDS –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(config, 'MOTIVATION_MESSAGES'), "MOTIVATION_MESSAGES –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(config, 'JK_WELCOME_MESSAGE'), "JK_WELCOME_MESSAGE –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(config, 'TOP_USERS_LIMIT'), "TOP_USERS_LIMIT –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(config, 'MONTHLY_WINNERS_HISTORY_LIMIT'), "MONTHLY_WINNERS_HISTORY_LIMIT –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        assert 0 < config.BASE_PROBABILITY < 1, "BASE_PROBABILITY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 1"
        assert 0 < config.BOOST_PROBABILITY < 1, "BOOST_PROBABILITY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 1"
        assert config.POINTS_PER_MESSAGE > 0, "POINTS_PER_MESSAGE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º"
        assert config.MIN_WORDS_FOR_POINTS > 0, "MIN_WORDS_FOR_POINTS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º"
        assert len(config.POINTS_THRESHOLDS) > 0, "POINTS_THRESHOLDS –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        assert len(config.MOTIVATION_MESSAGES) > 0, "MOTIVATION_MESSAGES –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        assert config.TOP_USERS_LIMIT > 0, "TOP_USERS_LIMIT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º"
        assert config.MONTHLY_WINNERS_HISTORY_LIMIT > 0, "MONTHLY_WINNERS_HISTORY_LIMIT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å
        assert 'ru' in config.JK_WELCOME_MESSAGE, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä—É—Å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è JK_WELCOME_MESSAGE"
        assert 'en' in config.JK_WELCOME_MESSAGE, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è JK_WELCOME_MESSAGE"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        assert config.BASE_PROBABILITY >= 0.20, f"BASE_PROBABILITY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 0.20, —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {config.BASE_PROBABILITY}"
        assert config.BOOST_PROBABILITY >= 0.325, f"BOOST_PROBABILITY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 0.325, —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {config.BOOST_PROBABILITY}"
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        print(f"   –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {config.BASE_PROBABILITY*100:.1f}%")
        print(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—É—Å—Ç–∞: {config.BOOST_PROBABILITY*100:.1f}%")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_settings_file():
    """–¢–µ—Å—Ç —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    
    try:
        if not os.path.exists('settings.txt'):
            print("‚ö†Ô∏è –§–∞–π–ª settings.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return True
        
        with open('settings.txt', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        required_settings = [
            'BASE_PROBABILITY',
            'BOOST_PROBABILITY',
            'BOOST_START_HOUR',
            'BOOST_END_HOUR',
            'POINTS_PER_MESSAGE',
            'MIN_WORDS_FOR_POINTS',
            'POINTS_THRESHOLDS'
        ]
        
        for setting in required_settings:
            if setting not in content:
                print(f"‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ settings.txt")
            else:
                print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting} –Ω–∞–π–¥–µ–Ω–∞")
        
        print("‚úÖ –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False

def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from database import Database
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = Database(":memory:")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
        db.init_database()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = 12345
        username = "test_user"
        first_name = "Test"
        last_name = "User"
        
        db.add_user(user_id, username, first_name, last_name)
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
        db.add_points(user_id, 100)
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = db.get_user_stats(user_id)
        assert stats is not None, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        assert stats['total_points'] >= 100, "–û—á–∫–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å"
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ø—ã
        daily_top = db.get_daily_top(5)
        weekly_top = db.get_weekly_top(5)
        monthly_top = db.get_monthly_top(5)
        
        assert isinstance(daily_top, list), "get_daily_top –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫"
        assert isinstance(weekly_top, list), "get_weekly_top –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫"
        assert isinstance(monthly_top, list), "get_monthly_top –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫"
        
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –º–µ—Å—è—Ü–∞
        db.save_monthly_winner(user_id, username, 1000, "2024-01-01")
        winners = db.get_monthly_winners()
        assert isinstance(winners, list), "get_monthly_winners –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫"
        
        print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –º–µ—Å—è—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_message_filtering():
    """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ bot.py
        import importlib.util
        spec = importlib.util.spec_from_file_location("bot", "bot.py")
        if spec is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å bot.py")
            return False
            
        bot_module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(bot_module)
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        from telegram.ext import Application
        app = Application.builder().token("test").build()
        bot = bot_module.ChatBot(app)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ —Ñ–∏–ª—å—Ç—Ä)
        good_messages = [
            "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞?",
            "–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –ø–æ–ª–Ω–æ—Å—Ç—å—é",
            "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
        ]
        
        for msg in good_messages:
            result = bot.is_meaningful_message(msg)
            if not result:
                print(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ '{msg}' –Ω–µ –ø—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä, –Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä)
        spam_messages = [
            "–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞",
            "–≤–≤–≤–≤–≤–≤–≤–≤–≤–≤–≤–≤–≤–≤",
            "1 2 3 4 5",
            "–¥–∞ –¥–∞ –¥–∞ –¥–∞ –¥–∞",
            "–ø—Ä–∏–≤–µ—Ç",
            "–æ–∫"
        ]
        
        spam_detected = 0
        for msg in spam_messages:
            if not bot.is_meaningful_message(msg):
                spam_detected += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–ø–∞–º–∞ –±—ã–ª–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
        if spam_detected >= len(spam_messages) * 0.8:  # 80% —Å–ø–∞–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
            print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∞–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"‚ö†Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–ª—å–∫–æ {spam_detected}/{len(spam_messages)} —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return False

def test_probability_calculation():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏"""
    print("\nüé≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏...")
    
    try:
        import importlib.util
        spec = importlib.util.spec_from_file_location("bot", "bot.py")
        if spec is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å bot.py")
            return False
            
        bot_module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(bot_module)
        
        from telegram.ext import Application
        app = Application.builder().token("test").build()
        bot = bot_module.ChatBot(app)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        prob = bot.get_current_probability()
        assert isinstance(prob, float), "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
        assert 0 <= prob <= 1, "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 1"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        import config
        assert prob in [config.BASE_PROBABILITY, config.BOOST_PROBABILITY], f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {prob} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"
        
        print("‚úÖ –†–∞—Å—á–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: {e}")
        return False

def test_jk_command():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /JK"""
    print("\nü™ô –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /JK...")
    
    try:
        import config
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö
        assert 'ru' in config.JK_WELCOME_MESSAGE, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä—É—Å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è"
        assert 'en' in config.JK_WELCOME_MESSAGE, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        ru_message = config.JK_WELCOME_MESSAGE['ru']
        en_message = config.JK_WELCOME_MESSAGE['en']
        
        assert "Jekardos Coin" in ru_message or "JK" in ru_message, "–†—É—Å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ JK"
        assert "Jekardos Coin" in en_message or "JK" in en_message, "–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ JK"
        assert "–∫–æ–º–∞–Ω–¥—ã" in ru_message.lower() or "commands" in ru_message.lower(), "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö"
        assert "commands" in en_message.lower(), "–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö"
        
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /JK –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /JK: {e}")
        return False

def test_syntax():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤"""
    print("\nüêç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞...")
    
    files_to_test = ['bot.py', 'config.py', 'database.py']
    
    for file in files_to_test:
        try:
            with open(file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            compile(content, file, 'exec')
            print(f"‚úÖ {file} - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            
        except SyntaxError as e:
            print(f"‚ùå {file} - –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}")
            return False
        except Exception as e:
            print(f"‚ùå {file} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
            return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Telegram –±–æ—Ç–∞\n")
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π", test_imports),
        ("–°–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–∞–π–ª–æ–≤", test_syntax),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("–§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫", test_settings_file),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database),
        ("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π", test_message_filtering),
        ("–†–∞—Å—á–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏", test_probability_calculation),
        ("–ö–æ–º–∞–Ω–¥–∞ /JK", test_jk_command),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ—à–µ–ª")
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python bot.py")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:")
        print("   pip install -r requirements.txt")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 